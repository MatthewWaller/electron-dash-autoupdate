name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Node.js dependencies
      run: npm ci

    - name: Setup Code Signing
      env:
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings build.keychain
        
        # Import certificate
        echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        
        # Set partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Verify certificate
        security find-identity -v -p codesigning build.keychain

    - name: Build Python app
      run: |
        pyinstaller --onefile --distpath dist/python --target-arch arm64 dash_app.py

    - name: Build Electron app
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        CSC_LINK: ${{ secrets.CERTIFICATE_P12 }}
        CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        npm run dist

    - name: Notarize App
      if: startsWith(github.ref, 'refs/tags/')
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        # Pre-notarization checks
        echo "=== Pre-notarization checks ==="
        
        # Check if the app is properly signed
        codesign -dv --verbose=4 dist/mac-arm64/Dash-Auto-Update-Demo.app
        
        # Check for any unsigned components
        find dist/mac-arm64/Dash-Auto-Update-Demo.app -type f -exec codesign -dv {} \; 2>&1 | grep -E "(not signed|invalid signature)" || echo "All components appear to be signed"
        
        # Check entitlements
        codesign -d --entitlements :- dist/mac-arm64/Dash-Auto-Update-Demo.app
        
        # Check for hardened runtime
        codesign -d --entitlements :- dist/mac-arm64/Dash-Auto-Update-Demo.app | grep -q "com.apple.security.cs.allow-jit" && echo "Hardened runtime enabled" || echo "Hardened runtime not properly configured"
        
        echo "=== Starting notarization ==="
        
        # Notarize the app
        xcrun notarytool submit dist/*.dmg --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID" --wait
        
        # Get detailed logs if notarization fails
        if [ $? -ne 0 ]; then
          echo "Notarization failed, getting detailed logs..."
          xcrun notarytool log c616bf1d-b71a-40a2-a38c-0b5b0a71b656 --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID"
        fi

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.dmg
          dist/*.zip
          dist/latest-mac.yml
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}