name: Build and Release

on: [workflow_dispatch]

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    env:
      MACOS_CERTIFICATE: ${{ secrets.CERTIFICATE_P12 }}

    steps:
    - uses: actions/checkout@v4

    - name: Import Code Signing Certificate
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
        p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

    - name: Debug Certificate Import
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "=== Debug Certificate Import ==="
        echo "Checking if certificate was imported properly..."
        
        # List all certificates in the keychain
        echo "All certificates in keychain:"
        security find-identity -v -p codesigning
        
        # Check if the certificate file was created
        echo "Checking for certificate file:"
        ls -la certificate.p12 2>/dev/null || echo "certificate.p12 not found"
        
        # Try to decode the certificate again
        echo "Decoding certificate from environment variable:"
        echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > debug_cert.p12
        ls -la debug_cert.p12
        
        # Check if the decoded file is valid
        echo "Checking decoded certificate:"
        file debug_cert.p12
        
        # Try importing manually
        echo "Trying manual import:"
        security import debug_cert.p12 -k login.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign || echo "Manual import failed"
        
        # Check again
        echo "Certificates after manual import:"
        security find-identity -v -p codesigning
        
        # Clean up duplicate certificates
        echo "Cleaning up duplicate certificates..."
        security delete-identity -Z "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" login.keychain || echo "No duplicates to clean"
        
        # Final check
        echo "Final certificate list:"
        security find-identity -v -p codesigning
        
        # Clean up
        rm -f debug_cert.p12

    - name: Set up notarization credentials
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Setting up notarization credentials..."
        
        # Verify the certificate first
        echo "=== Certificate Verification ==="
        echo "Available certificates:"
        security find-identity -v -p codesigning
        
        echo "=== Certificate Details ==="
        CERT_IDENTITY=$(security find-identity -v -p codesigning | grep "Apple Development" | head -1 | awk '{print $2}')
        if [ -n "$CERT_IDENTITY" ]; then
          echo "Found certificate: $CERT_IDENTITY"
          echo "Certificate details:"
          
          # Try different methods to get certificate details
          echo "Method 1 - Using identity hash:"
          security find-certificate -Z "$CERT_IDENTITY" -p 2>/dev/null || echo "Method 1 failed"
          
          echo "Method 2 - Using certificate name:"
          security find-certificate -c "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" -p 2>/dev/null || echo "Method 2 failed"
          
          echo "Method 3 - List all certificates:"
          security find-certificate -a -p 2>/dev/null | head -20 || echo "Method 3 failed"
          
          echo "Certificate validity check:"
          codesign -dv --verbose=4 /usr/bin/true 2>&1 | grep -E "(Authority:|TeamIdentifier:|Timestamp:)" || echo "Could not verify certificate validity"
        else
          echo "ERROR: No Apple Development certificate found!"
          exit 1
        fi
        
        # Check if we need a Developer ID certificate instead
        echo "=== Checking for Developer ID Certificate ==="
        DEV_ID_CERT=$(security find-identity -v -p codesigning | grep "Developer ID" | head -1 | awk '{print $2}')
        if [ -n "$DEV_ID_CERT" ]; then
          echo "Found Developer ID certificate: $DEV_ID_CERT"
          echo "NOTE: For notarization, you might need a Developer ID certificate instead of Apple Development"
        else
          echo "No Developer ID certificate found"
          echo ""
          echo "=== IMPORTANT: Certificate Type Issue ==="
          echo "You are using an 'Apple Development' certificate, but notarization typically requires a 'Developer ID' certificate."
          echo ""
          echo "Certificate types:"
          echo "- Apple Development: For development and testing (what you have)"
          echo "- Developer ID Application: For distribution and notarization (what you need)"
          echo ""
          echo "To fix this, you need to:"
          echo "1. Go to Apple Developer Portal"
          echo "2. Create a 'Developer ID Application' certificate"
          echo "3. Export it as .p12"
          echo "4. Update your GitHub secrets"
          echo ""
        fi
        
        # Test certificate signing capability
        echo "=== Testing Certificate Signing ==="
        TEST_FILE="/tmp/test_sign"
        echo "test" > "$TEST_FILE"
        
        if codesign --force --sign "$CERT_IDENTITY" "$TEST_FILE" 2>/dev/null; then
          echo "✅ Certificate can sign files successfully"
          codesign -dv "$TEST_FILE"
        else
          echo "❌ Certificate cannot sign files"
          echo "This might indicate the certificate is not suitable for code signing"
        fi
        
        rm -f "$TEST_FILE"
        
        # Store notarization credentials in keychain
        if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_ID_PASSWORD }}" ]; then
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_ID_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}"
        fi
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build Python app
      run: |
        pyinstaller --onefile --distpath dist/python --target-arch arm64 dash_app.py

    - name: Build Electron app
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # Code signing environment variables
        CSC_LINK: ${{ secrets.CERTIFICATE_P12 }}
        CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        # Enable code signing if certificate is available
        CSC_IDENTITY_AUTO_DISCOVERY: ${{ env.MACOS_CERTIFICATE != '' && 'true' || 'false' }}
      run: |
        echo "Building Electron app with code signing..."
        
        # Debug: Check if entitlements file exists and is readable
        ls -la entitlements.mac.plist
        cat entitlements.mac.plist
        
        # Build the app
        npm run dist
        
        # Manual code signing to ensure all components are signed
        if [ -n "${{ env.MACOS_CERTIFICATE }}" ]; then
          echo "=== Manual code signing ==="
          
          # Find the app bundle
          APP_PATH=$(find dist -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            echo "Found app bundle: $APP_PATH"
            
            # Sign all helper apps
            echo "Signing helper apps..."
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Dash-Auto-Update-Demo Helper.app"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Dash-Auto-Update-Demo Helper (GPU).app"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Dash-Auto-Update-Demo Helper (Plugin).app"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Dash-Auto-Update-Demo Helper (Renderer).app"
            
            # Sign frameworks
            echo "Signing frameworks..."
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Electron Framework.framework"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Mantle.framework"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/ReactiveObjC.framework"
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Frameworks/Squirrel.framework"
            
            # Sign the Python executable
            echo "Signing Python executable..."
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH/Contents/Resources/python/dash_app"
            
            # Final sign of the main app
            echo "Signing main app..."
            codesign --force --sign "Developer ID Application: Cephalopod Studio LLC (QBL739225X)" --entitlements entitlements.mac.plist --options runtime "$APP_PATH"
            
            echo "Code signing complete!"
          else
            echo "No app bundle found for signing"
          fi
        fi

    - name: Verify code signing
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Verifying code signature for the built app..."
        APP_PATH=$(find dist -name "*.app" -type d | head -1)
        if [ -n "$APP_PATH" ]; then
          codesign -dv --verbose=4 "$APP_PATH"
          echo "Checking if app is properly signed:"
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"
        else
          echo "No .app bundle found in dist/"
          find dist -type d
        fi

    - name: Notarize app
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Starting notarization process..."
        
        # Find the app bundle
        APP_PATH=$(find dist -name "*.app" -type d | head -1)
        if [ -z "$APP_PATH" ]; then
          echo "ERROR: No .app bundle found"
          find dist -type d
          exit 1
        fi
        
        echo "Found app bundle: $APP_PATH"
        
        # Create a zip file for notarization (required for app bundles)
        NOTARIZATION_ZIP="$APP_PATH.zip"
        echo "Creating zip file for notarization: $NOTARIZATION_ZIP"
        ditto -c -k --keepParent "$APP_PATH" "$NOTARIZATION_ZIP"
        
        # Submit for notarization and capture submission ID
        echo "Submitting app for notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit "$NOTARIZATION_ZIP" --keychain-profile "notarytool-profile" --wait --timeout 30m 2>&1)
        NOTARIZATION_EXIT_CODE=$?
        
        echo "Notarization output:"
        echo "$NOTARIZATION_OUTPUT"
        
        # Extract submission ID from output
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep "id:" | head -1 | awk '{print $2}')
        
        if [ $NOTARIZATION_EXIT_CODE -eq 0 ]; then
          echo "Notarization successful!"
          
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Getting detailed notarization logs for submission ID: $SUBMISSION_ID"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "notarytool-profile"
          fi
          
          # Staple the notarization to the app
          echo "Stapling notarization to app..."
          xcrun stapler staple "$APP_PATH"
          
          # Verify the stapling worked
          echo "Verifying stapled notarization..."
          xcrun stapler validate "$APP_PATH"
        else
          echo "Notarization failed with exit code $NOTARIZATION_EXIT_CODE"
          echo "Getting detailed error logs..."
          
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Getting detailed notarization logs for submission ID: $SUBMISSION_ID"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "notarytool-profile"
          fi
          
          echo "This may be due to missing credentials or Apple ID issues"
          echo "The app will still be signed but not notarized"
        fi
        
        # Clean up the zip file
        rm -f "$NOTARIZATION_ZIP"

    - name: Notarize DMG
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Starting DMG notarization process..."
        
        # Find the DMG file
        DMG_FILE=$(find dist -name "*.dmg" -type f | head -1)
        if [ -z "$DMG_FILE" ]; then
          echo "ERROR: No DMG file found"
          find dist -type f
          exit 1
        fi
        
        echo "Found DMG file: $DMG_FILE"
        echo "DMG file details:"
        ls -la "$DMG_FILE"
        file "$DMG_FILE"
        
        # Submit DMG for notarization
        echo "Submitting DMG for notarization: $DMG_FILE"
        xcrun notarytool submit "$DMG_FILE" \
          --keychain-profile "notarytool-profile" \
          --wait \
          --timeout 30m
        
        DMG_NOTARIZATION_EXIT_CODE=$?
        
        if [ $DMG_NOTARIZATION_EXIT_CODE -eq 0 ]; then
          echo "DMG notarization successful!"
          
          # Staple the notarization to the DMG
          echo "Stapling notarization to DMG..."
          xcrun stapler staple "$DMG_FILE"
          
          # Verify the stapling worked
          echo "Verifying stapled DMG notarization..."
          xcrun stapler validate "$DMG_FILE"
        else
          echo "DMG notarization failed with exit code $DMG_NOTARIZATION_EXIT_CODE"
          echo "This may be due to missing credentials, Apple ID issues, or DMG format issues"
          echo "The DMG will still be signed but not notarized"
        fi

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.dmg
          dist/*.zip
          dist/latest-mac.yml
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}