name: Build and Release

on: [workflow_dispatch]

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    env:
      MACOS_CERTIFICATE: ${{ secrets.CERTIFICATE_P12 }}

    steps:
    - uses: actions/checkout@v4

    - name: Import Code Signing Certificate
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
        p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

    - name: Set up notarization credentials
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Setting up notarization credentials..."
        # Store notarization credentials in keychain
        if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_ID_PASSWORD }}" ]; then
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_ID_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}"
        fi
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build Python app
      run: |
        pyinstaller --onefile --distpath dist/python --target-arch arm64 dash_app.py

    - name: Build Electron app
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # Code signing environment variables
        CSC_LINK: ${{ secrets.CERTIFICATE_P12 }}
        CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        # Enable code signing if certificate is available
        CSC_IDENTITY_AUTO_DISCOVERY: ${{ env.MACOS_CERTIFICATE != '' && 'true' || 'false' }}
      run: |
        echo "Building Electron app with code signing..."
        
        # Debug: Check if entitlements file exists and is readable
        ls -la entitlements.mac.plist
        cat entitlements.mac.plist
        
        # Build the app
        npm run dist

    - name: Verify code signing
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Verifying code signature for the built app..."
        APP_PATH=$(find dist -name "*.app" -type d | head -1)
        if [ -n "$APP_PATH" ]; then
          codesign -dv --verbose=4 "$APP_PATH"
          echo "Checking if app is properly signed:"
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"
        else
          echo "No .app bundle found in dist/"
          find dist -type d
        fi

    - name: Notarize app
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Starting notarization process..."
        
        # Find the app bundle
        APP_PATH=$(find dist -name "*.app" -type d | head -1)
        if [ -z "$APP_PATH" ]; then
          echo "ERROR: No .app bundle found"
          find dist -type d
          exit 1
        fi
        
        echo "Found app bundle: $APP_PATH"
        
        # Create a zip file for notarization (required for app bundles)
        NOTARIZATION_ZIP="$APP_PATH.zip"
        echo "Creating zip file for notarization: $NOTARIZATION_ZIP"
        ditto -c -k --keepParent "$APP_PATH" "$NOTARIZATION_ZIP"
        
        # Submit for notarization and capture submission ID
        echo "Submitting app for notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit "$NOTARIZATION_ZIP" --keychain-profile "notarytool-profile" --wait --timeout 30m 2>&1)
        NOTARIZATION_EXIT_CODE=$?
        
        echo "Notarization output:"
        echo "$NOTARIZATION_OUTPUT"
        
        # Extract submission ID from output
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep "id:" | head -1 | awk '{print $2}')
        
        if [ $NOTARIZATION_EXIT_CODE -eq 0 ]; then
          echo "Notarization successful!"
          
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Getting detailed notarization logs for submission ID: $SUBMISSION_ID"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "notarytool-profile"
          fi
          
          # Staple the notarization to the app
          echo "Stapling notarization to app..."
          xcrun stapler staple "$APP_PATH"
          
          # Verify the stapling worked
          echo "Verifying stapled notarization..."
          xcrun stapler validate "$APP_PATH"
        else
          echo "Notarization failed with exit code $NOTARIZATION_EXIT_CODE"
          echo "Getting detailed error logs..."
          
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Getting detailed notarization logs for submission ID: $SUBMISSION_ID"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "notarytool-profile"
          fi
          
          echo "This may be due to missing credentials or Apple ID issues"
          echo "The app will still be signed but not notarized"
        fi
        
        # Clean up the zip file
        rm -f "$NOTARIZATION_ZIP"

    - name: Notarize DMG
      if: ${{ env.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Starting DMG notarization process..."
        
        # Find the DMG file
        DMG_FILE=$(find dist -name "*.dmg" -type f | head -1)
        if [ -z "$DMG_FILE" ]; then
          echo "ERROR: No DMG file found"
          find dist -type f
          exit 1
        fi
        
        echo "Found DMG file: $DMG_FILE"
        echo "DMG file details:"
        ls -la "$DMG_FILE"
        file "$DMG_FILE"
        
        # Submit DMG for notarization
        echo "Submitting DMG for notarization: $DMG_FILE"
        xcrun notarytool submit "$DMG_FILE" \
          --keychain-profile "notarytool-profile" \
          --wait \
          --timeout 30m
        
        DMG_NOTARIZATION_EXIT_CODE=$?
        
        if [ $DMG_NOTARIZATION_EXIT_CODE -eq 0 ]; then
          echo "DMG notarization successful!"
          
          # Staple the notarization to the DMG
          echo "Stapling notarization to DMG..."
          xcrun stapler staple "$DMG_FILE"
          
          # Verify the stapling worked
          echo "Verifying stapled DMG notarization..."
          xcrun stapler validate "$DMG_FILE"
        else
          echo "DMG notarization failed with exit code $DMG_NOTARIZATION_EXIT_CODE"
          echo "This may be due to missing credentials, Apple ID issues, or DMG format issues"
          echo "The DMG will still be signed but not notarized"
        fi

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.dmg
          dist/*.zip
          dist/latest-mac.yml
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}